[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "metaforr",
    "section": "",
    "text": "1 Introduction\nR is fun. Why?\nR is considered fun primarily due to its community and extensive package ecosystem. The active and supportive community fosters a very collaborative environment, making learning enjoyable. The wealth of packages available in R facilitates efficient data analysis, visualization, and modeling, enabling users to tackle complex tasks with ease. Moreover, the language’s flexibility encourages creativity and customization, allowing users to create tailored solutions. Its intuitive syntax and widespread use across academia and various industries further contribute to its appeal, making the journey of learning and using R an engaging and rewarding experience.\nPython might let you fly, but R will make your data dance the tango.\nCode\nlibrary(\"cowsay\")\nsay(\"when in doubt, puRRR it out!\", \"cat\")\n\n\n\n -------------- \nwhen in doubt, puRRR it out! \n --------------\n    \\\n      \\\n        \\\n            |\\___/|\n          ==) ^Y^ (==\n            \\  ^  /\n             )=*=(\n            /     \\\n            |     |\n           /| | | |\\\n           \\| | |_|/\\\n      jgs  //_// ___/\n               \\_)\nLike the cat said, the innate advantage with R is how quickly we can visualize ideas.\n[BUT]\nFinding a good R library is demanding. ggplot2 is might not be the answer for everything. So, we have tasked ourselves to use statistical methods to explore and visualize entirety of CRAN packages using what we learnt from STATGR5702 at Columbia University."
  },
  {
    "objectID": "index.html#our-work",
    "href": "index.html#our-work",
    "title": "metaforr",
    "section": "1.1 Our Work",
    "text": "1.1 Our Work\nResults (our findings) will influence our builds.\n\nData: Find appropriate parameters to judge a package.\n\nClean the available package’s data.\nRetain features that well describe a package’s relevance.\n\nResults: Research the data.\n\nRelevance is measure via trending usage data and a package usage history available via pkgsearch package.\nProvide a comprehensive understanding of factors influencing a package’s popularity and characteristics within the ecosystem.\n\nInteractive Graphs:\n\nBuild a keystroke animation using d3 which animates dependency graph of queried package.\nBuild a package suggester by tokenizing keywords associated with each package’s metadata.\nBuild a package backlink tracer, which shows how many times another package found this package useful.\n\n\n\n1.1.1 Where?\n\nData Cleaning is in Data section.\nResearch Results are in Results section.\nPlayable Graphs are in Interactive Graph section."
  },
  {
    "objectID": "index.html#outcome",
    "href": "index.html#outcome",
    "title": "metaforr",
    "section": "1.2 Outcome",
    "text": "1.2 Outcome\nWe hope to make this website a one-stop-shop for anyone trying to find good R packages!"
  },
  {
    "objectID": "index.html#data-sources",
    "href": "index.html#data-sources",
    "title": "metaforr",
    "section": "1.3 Data Sources",
    "text": "1.3 Data Sources\nR packages used (for Results):\n\navailable [CRAN]: This package let us “Check if the Title of a Package is Available, Appropriate and Interesting”.\npkgsearch [CRAN]: This package helped us “Search CRAN metadata about packages by keyword, popularity, recent activity, package name and more. Uses the ‘R-hub’ search server, see https://r-pkg.org and the CRAN metadata database, that contains information about CRAN packages.”\n\nSince our data sources themselves are packages, we think the repository will always be upto date thanks to github workflows! Here, let’s check number of packages our dataset has:\n\n\nCode\nsuppressMessages(library(dplyr))\noptions(repos = 'https://cloud.r-project.org/')\navailable.packages() %&gt;%\n    nrow()\n\n\n[1] 20200"
  },
  {
    "objectID": "data.html#description",
    "href": "data.html#description",
    "title": "2  Data",
    "section": "2.1 Description",
    "text": "2.1 Description\nOur research aim is to provide a comprehensive understanding of the factors influencing package popularity and characteristics within the ecosystem. We will investigate it through the following 3 sub-questions:\n\nDependency Analysis: How do package dependencies (Depends, Imports, LinkingTo) influence the popularity or adoption of R packages?\nLicensing Trends: What are the prevailing trends in package licensing within the R ecosystem?\nMaintainability of Package: How version updates correlate with other package characteristics, such as the number of dependent packages and suggested packages, and the total number of downloads.\n\nIn addressing the first research question on dependency analysis, we will conduct a thorough data exploration to identify packages with the highest number of dependencies and analyze the distribution of packages based on the type and number of dependencies. To visualize these relationships, sankey diagrams and network graphs will be created, offering insights into the interconnectedness of packages.\nFor the second research question concerning licensing trends, our analysis will involve calculating the distribution of different license types and examining how the type of license affects the popularity of the package. We will use a bar chart to show the distribution of the license and ridge plots to show the difference in popularity for each license.\nLastly, the third research question about maintainability of R packages, we will explore how version updates correlate with characteristics like the number of dependent packages, suggested packages, and total download counts. Using a correlation heatmap, we aim to visualize these relationships, identifying potential associations between aspects of package versions such as dependencies, suggested packages, required R version, and download counts."
  },
  {
    "objectID": "data.html#missing-value-analysis",
    "href": "data.html#missing-value-analysis",
    "title": "2  Data",
    "section": "2.2 Missing value analysis",
    "text": "2.2 Missing value analysis\n\n\nCode\nsuppressMessages(library(ggplot2))\nsuppressMessages(library(dplyr))\nsuppressMessages(library(redav))\n\ndf = read.csv(\"./assets/cran_packages.csv\")\n\nmissing_percentage &lt;- colMeans(is.na(df)) * 100\nmissing_df &lt;- data.frame(variables = names(missing_percentage), missing_percentage)\n\nggplot(missing_df, aes(x = reorder(variables, -missing_percentage), y = missing_percentage)) +\n  geom_bar(stat = \"identity\", fill = \"skyblue\") +\n  labs(title = \"Percentage of Missing Data by Variable\", x = \"Variables\", y = \"Missing Percentage\") +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\n\n\n\n\nAs you can see, for the first 7 variables more than 99% of rows are missing them so we dropped these columns.\n\n\nCode\nthreshold &lt;- 0.95\ndropped &lt;- df %&gt;% select(names(which(colMeans(is.na(.)) &lt;= threshold)))\nsuppressMessages(plot_missing(dropped,percent=TRUE))\n\n\n\n\n\nAfter excluding the previously identified columns, it becomes evident that six columns—Package, Versions, License, MD5, NeedsCompilation, and Repository—contain no missing values. Notably, the LinkingTo column, which signifies that the current package links to additional packages necessary for compilation or linking, has over 75% of its rows missing.\nFurthermore, two prevalent patterns emerge: the absence of both LinkingTo and Suggests, and the absence of both LinkingTo and Depends, each accounting for approximately 10% of the dataset. In this context, “Suggests” refers to other R packages recommended for additional features but not essential for basic functionality, while “Depends” indicates other R packages critical for the core functionality of the package.\nThis observed pattern is logical, as it underscores the nature of package dependencies. If a package doesn’t necessitate dependencies for its fundamental operations, it’s reasonable to assume that additional functionalities, such as those suggested or depended upon, would also not require additional dependencies."
  },
  {
    "objectID": "results.html#understanding-the-popularity-landscape",
    "href": "results.html#understanding-the-popularity-landscape",
    "title": "3  Results",
    "section": "3.1 Understanding the Popularity Landscape",
    "text": "3.1 Understanding the Popularity Landscape\nIn our exploration of R packages, our primary aim is to discern the traits that contribute to a package’s popularity. To gauge popularity, we turn to the number of downloads as a proxy metric. Let’s delve into the distribution of download counts.\nThe histogram reveals a right-skewed distribution, signifying that the majority of R packages have relatively low download counts, while a select few enjoy substantial popularity. However, this visual can be overwhelming when looking at the entire dataset, prompting us to create a refined histogram without upper outliers. This adjusted view retains a right-skew but approximates an exponential distribution. Notably, the mode for the number of downloads falls within the range of 5000 to 10000, encompassing approximately 12% of all packages.\n\n\nCode\nlibrary(ggplot2)\nlibrary(patchwork)\ndf = read.csv(\"./assets/cran_packages_dropped.csv\")\n\nhist = ggplot(df, aes(x = count)) +\n  geom_histogram(fill = \"cornflowerblue\", color = \"black\", alpha = 0.7, bins = 50) +\n  labs(title = \"Histograms for # of download \", x = \"# of download\") +\n  theme_minimal() \n\n\niqr &lt;- IQR(df$count)\n\n# Set a threshold for identifying upper outliers\nthreshold &lt;- 1.5  # You can adjust this value based on your criteria\n\n# Identify upper outliers\nupper_outliers &lt;- df$count &gt; quantile(df$count, 0.75) + threshold * iqr\n\n# Filter rows with upper outliers\nno_outliers_df &lt;- df[!upper_outliers, ]\n\nhist_no_outlier = ggplot(no_outliers_df, aes(x = count)) +\n  geom_histogram(fill = \"cornflowerblue\", color = \"black\", alpha = 0.7, bins = 20) +\n  labs(title = \"Histograms for # of download (no upper outliers)\", x = \"# of download\") +\n  theme_minimal()\n\nhist / hist_no_outlier"
  },
  {
    "objectID": "results.html#license-pattern",
    "href": "results.html#license-pattern",
    "title": "3  Results",
    "section": "3.2 License pattern",
    "text": "3.2 License pattern\nHaving gained insights into the popularity distribution, our next inquiry involves the relationship between the type of license and a package’s popularity. With 159 unique licenses in our dataset, we opted to group them into 24 license groups, focusing on broader categorizations to simplify the analysis.\nExamining the distribution of license types, we find that GPL and MIT are the predominant licenses, collectively constituting nearly 90% of all R packages. The popularity of GPL and MIT licenses is further underscored by their extensive use within the R community. GPL, known for its open-source nature, aligns with the collaborative ethos of the R environment, while the MIT license, with its permissive nature, attracts developers seeking flexibility.\n\n\nCode\nsuppressMessages(library(tidyr))\nsuppressMessages(library(dplyr))\n\nlicenses = c(\"ACM\", \"AGPL\", \"Apache\", \"Artistic\", \"BSD\", \"BSL\", \"CC\", \"CCO\", \"CeCILL\", \"CPL\", \"Common Public\", \"Creative Common\", \"EPL\", \"EUPL\", \"FreeBSD\", \"GNU\", \"GPL\", \"LGPL\", \"Lucent Public\", \"MIT\", \"MPL\", \"Mozilla Public\", \"Unlimited\", \"file\")\n\n\ndf = df %&gt;% \n  mutate(\n    license_group = NA\n  )\n\nfor (lic in licenses) {\n  df = df %&gt;%\n    mutate(\n      license_group = case_when(grepl(paste0(\"^\",lic), License) ~ paste(lic),\n                        !is.na(license_group) ~ license_group,\n                        .default = NA)\n    )\n}\n\n\ndf &lt;- df %&gt;%\n  mutate(\n    license_group = ifelse(License == \"CECILL-2.1\", \"CeCILL\", license_group)\n  )\n\nvalue_counts_agg = df %&gt;% \n  group_by(license_group) %&gt;%\n  summarise(total_count = n())\n\n\npackage_barplot &lt;-ggplot(data=value_counts_agg, aes(x=reorder(license_group, -total_count), y=total_count)) +\n  geom_col(fill= \"cornflowerblue\", color = \"black\") +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 60, hjust=1)) +\n  labs(title=\"Frequency of license (Overall)\", x=\"License\", y=\"Frequency\")\n\npackage_barplot"
  },
  {
    "objectID": "results.html#license-influence-on-downloads",
    "href": "results.html#license-influence-on-downloads",
    "title": "3  Results",
    "section": "3.3 License Influence on Downloads:",
    "text": "3.3 License Influence on Downloads:\nTo understand how the type of license may influence download counts, we employed Cleveland dot plots to highlight key statistical metrics for each license group. While the maximum download counts are generally higher for the most prevalent licenses, such as GPL and MIT, no strict ordering is observed. Interestingly, licenses like MPL and File, with lower prevalence, boast high maximum download counts, suggesting that popularity is not solely determined by prevalence.\nA recurring theme across all license types is the consistently larger mean than median, indicating a skewed distribution where a small number of packages command a significant number of downloads. This skewness is consistent regardless of the license type.\nUpon closer inspection, we find that less prevalent licenses tend to have higher median download counts. This suggests that, within less popular license categories, there is a relatively higher concentration of moderately popular packages. The reasons for this intriguing phenomenon warrant further investigation.\n\n\nCode\nlicense_sort = value_counts_agg %&gt;% arrange(total_count)\ndf$license_group &lt;- factor(df$license_group, levels = license_sort$license_group)\ndf_summary &lt;- df %&gt;%\n  group_by(license_group) %&gt;%\n  summarise(\n    mean = mean(count),\n    median = median(count),\n    max = max(count)\n  )\n\n# order_max = df_summary %&gt;% arrange(max) %&gt;% pull(license_group)\n# order_max\ntmp = df_summary\n\ndf_summary = pivot_longer(df_summary, cols = c(mean, median, max), names_to = \"statistic\", values_to = \"value\")\n\ndf_summary = left_join(df_summary, tmp, by = \"license_group\")\n\n# Create a Cleveland dot plot\nplot = ggplot(df_summary, aes(x = license_group, y = value, color = factor(statistic))) +\n  geom_point(shape = 18, size=3) +\n  labs(title = \"Cleveland Dot Plot - Summary statistics by License \\n (log scale, sorted by # of package in the license)\", x=\"License\", y = \"Summary statstics\", color = \"Summary\") +\n  scale_color_manual(values = c(\"mean\" = \"blue\", \"median\" = \"green\", \"max\" = \"red\")) + \n  theme(axis.text.x = element_text(angle = 60, hjust=1)) +\n  theme_minimal() +\n  coord_flip()\n\nplot_log &lt;- plot + scale_y_log10(labels = scales::comma)\n  \nplot_log"
  },
  {
    "objectID": "results.html#license-and-popularity-top-100-a-shift-in-license-dynamics",
    "href": "results.html#license-and-popularity-top-100-a-shift-in-license-dynamics",
    "title": "3  Results",
    "section": "3.4 License and Popularity (Top 100) ~ A Shift in License Dynamics ~",
    "text": "3.4 License and Popularity (Top 100) ~ A Shift in License Dynamics ~\nIn our exploration of package popularity, we’ve broadened our scope to scrutinize the correlation between license types and download counts, this time focusing on the top 100 downloaded packages. Surprisingly, this more exclusive group unveils a shift in the license landscape.\nWithin the top 100, MIT-licensed packages outshine their counterparts, with more than double the presence of GPL-licensed packages. This stark contrast underscores the high regard and widespread adoption of MIT-licensed packages within the upper echelons of popularity. The MIT license’s permissive nature may be a key factor contributing to the prominence of its associated packages.\nDiving deeper into license prevalence within the elite 100, intriguing observations emerge. The third most prevalent license, LGPL, makes a solitary appearance, contrasting with its higher prevalence in the broader dataset. Conversely, licenses like File and MPL, which occupy a modest standing in overall prevalence, manage to secure a spot within the coveted top 100.\nTo summarize, the overall shape of the bar graphs remains relatively consistent, the prevalence of different licenses undergoes notable shifts when we transition from the entire dataset to the top 100.\n\n\nCode\n# library(gridExtra)\ntop_100 &lt;- df %&gt;%\n  arrange(desc(count)) %&gt;%\n  slice(1:100)\n\ntop_100_counts_agg = top_100 %&gt;% \n  group_by(license_group) %&gt;%\n  summarise(total_count = n())\n\n\ntop_100_package_barplot &lt;-ggplot(data=top_100_counts_agg, aes(x=reorder(license_group, -total_count), y=total_count)) +\n  geom_col(fill= \"cornflowerblue\", color = \"black\") +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 60, hjust=1)) +\n  labs(title=\"Frequency of license (Top 100)\", x=\"License\", y=\"Frequency\")\n\n\n(package_barplot | top_100_package_barplot) + plot_layout(ncol = 2)"
  },
  {
    "objectID": "results.html#influence-of-the-degree-of-maintainance-in-popularity",
    "href": "results.html#influence-of-the-degree-of-maintainance-in-popularity",
    "title": "3  Results",
    "section": "3.5 Influence of the degree of maintainance in popularity",
    "text": "3.5 Influence of the degree of maintainance in popularity\nIn our quest to uncover correlations between maintenance efforts and package popularity, we employ the version number as a proxy metric for maintenance intensity. By considering the leading digit of the version (e.g., version 1.2.4 becomes version 1), we aim to capture a holistic view of maintenance practices. Prior to delving into the analysis, we address two crucial considerations.\nThe first challenge revolves around the initial version assigned to a package, varying between version 0 and version 1. Acknowledging the ambiguity of whether version 1 signifies the initial release or a subsequent update, we opted to treat the version as is, embracing the inherent diversity in package versioning strategies.\nSome packages exhibit version numbers exceeding 1000, not indicative of an astronomical number of updates but often reflecting initial versioning based on dates (e.g., 2022.03.02). To manage this, versions larger than 5 were grouped together. This pragmatic grouping ensures a balanced analysis while acknowledging the limited presence of such instances.\n\n3.5.1 Without upper outliers :\nAs stated before, since the dataset includes extreme outliers, we first investigate the trend with excluding upper outliers for the sake of clear visualization. For versions less than 2, the mode resides within the first bin (less than 5000 downloads). In contrast, version 2 displays a mode within the range of 37500 to 40000 downloads. This trend persists for versions 3 and 4, indicating a clear association between higher version numbers and increased download counts. However, versions larger than 5, despite their sporadic presence, exhibit a mode within the lower download count range (&lt;5000).\n\n\nCode\nlibrary(stringr)\n# Boxplot + density based on the version (popularity)\ndf$version_group &lt;- as.numeric(str_extract(df$Version, \"\\\\d+\"))\ndf = df %&gt;%\n  mutate(version_group = if_else(version_group &gt;= 5, 5, version_group))\ndf$version_group = as.factor(df$version_group)\ndf = df %&gt;%\n  mutate(version_group = if_else(version_group == \"5\", \"5 ≥\", version_group))\n\n# Function to filter outliers using IQR\nfilter_outliers_iqr &lt;- function(x, coef = 1.5) {\n  q1 &lt;- quantile(x, 0.25)\n  q3 &lt;- quantile(x, 0.75)\n  iqr &lt;- q3 - q1\n  lower_bound &lt;- q1 - coef * iqr\n  upper_bound &lt;- q3 + coef * iqr\n  return(between(x, 0, upper_bound))\n}\n\n# Filter outliers using the filter_outliers_iqr function\nfiltered_df &lt;- df %&gt;% filter(filter_outliers_iqr(count))\n\ncustom_breaks &lt;- seq(0, max(filtered_df$count) + 5000, by = 5000)\n\nversion_hist = ggplot(filtered_df, aes(x = count, fill=version_group)) +\n  geom_histogram(fill = \"cornflowerblue\", color = \"black\", alpha = 0.7, breaks=custom_breaks) +\n  labs(title = \"Histogram of # of download faceted by version (binwidth=5000)\", x = \"Version\", y = \"# of download\") +\n  facet_wrap(~version_group, scales = \"free_y\") +\n  theme_minimal()\n\nversion_hist\n\n\n\n\n\nUpon closer inspection of the top 100 downloaded packages, a paradoxical shift emerges. Version 1 emerges as the most frequent, closely followed by version 0. This apparent contradiction to the earlier trend might be becuse that highly popular packages tend to undergo meticulous scrutiny before release, potentially reducing the need for frequent updates. Additionally, the interconnected nature of popular packages, serving as dependencies for numerous others, may influence authors to intentionally refrain from frequent updates.\n\n\nCode\ntop100_df_version = df %&gt;%\n    arrange(desc(count)) %&gt;%\n    slice(1:100)\n\ntop_100_version_bar &lt;-ggplot(data=top100_df_version, aes(x=version_group)) +\n  geom_bar(fill= \"cornflowerblue\", color = \"black\") +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 60, hjust=1)) +\n  labs(title=\"Frequency of version (Top 100)\", x=\"Version\", y=\"Frequency\")\ntop_100_version_bar"
  },
  {
    "objectID": "results.html#a-confluence-of-factors-license-and-version",
    "href": "results.html#a-confluence-of-factors-license-and-version",
    "title": "3  Results",
    "section": "3.6 A Confluence of Factors: License and Version",
    "text": "3.6 A Confluence of Factors: License and Version\nHaving explored the impact of license and version on package popularity individually, we now venture into the intriguing territory where these two dimensions intersect, unveiling how they collectively shape a package’s acclaim.\nMapping License and Version Relations: Our initial examination focuses on the interplay between licenses and version numbers. Notably, MIT-licensed packages exhibit a higher prevalence of version 0, contrasting with GPL licenses. While the proportion of version 0 is comparable for both licenses, GPL licenses exhibit a more pronounced presence in the realm of higher versions (2 and beyond).\nMIT’s Version 0 Dominance: The predominance of version 0 among MIT-licensed packages piques curiosity. While speculation abounds, one possibility is that MIT licenses may attract a substantial number of initial releases, capturing the spirit of experimentation and innovation.\nGPL’s Higher Version Realm: In stark contrast, GPL licenses assert themselves more prominently in the domain of higher version numbers (2 and above). This phenomenon may reflect a commitment to continued development and improvement within the GPL ecosystem, catering to the evolving needs of users and stakeholders.\nInterestingly, when we compare GPL and Other, we observe version distributions that are nearly identical.\n\n\nCode\nsuppressMessages(library(vcd))\nsuppressMessages(library(RColorBrewer))\nmajority_license_df = df %&gt;%\n    mutate(\n    license_group = case_when(\n      license_group == \"MIT\" ~ \"MIT\",\n      license_group == \"GPL\" ~ \"GPL\",\n      TRUE ~ \"Other\"\n  )\n    )\n\nmajority_license_version_df = majority_license_df %&gt;%\n    mutate(\n    version_group = ifelse(version_group == \"0\" | version_group == \"1\", version_group, \"2 ≥\")\n    )\n\nmajority_license_version_df$version_group &lt;- factor(majority_license_version_df$version_group, levels = c(\"2 ≥\", \"1\", \"0\"))\n# maybe remove needscompilation and add one more license_group\nmosaic(version_group ~ license_group, \n       direction = c(\"v\", \"h\"), \n       majority_license_version_df, \n       highlighting_fill = brewer.pal(1, \"Blues\"),\n       spacing = spacing_dimequal(c(.4, .3, 0, 0)),\n       rot_labels = 0,\n       main = \"Mosaic Plot for License and Version\",\n       labeling_args = list(set_varnames = c(NeedsCompilation = \"Need Compilation?\", version_group = \"Version\", license_group = \"License\")))\n\n\nWarning in brewer.pal(1, \"Blues\"): minimal value for n is 3, returning requested palette with 3 different levels"
  },
  {
    "objectID": "results.html#a-unified-perspective-license-version-and-popularity",
    "href": "results.html#a-unified-perspective-license-version-and-popularity",
    "title": "3  Results",
    "section": "3.7 A Unified Perspective: License, Version, and Popularity",
    "text": "3.7 A Unified Perspective: License, Version, and Popularity\nNow we examine the combined influence of license and version on popularity. By excluding upper outliers, we focus our analysis on a refined dataset that offers a clearer lens through which to view the interplay of these factors.\nUnified Popularity Patterns: Intriguingly, when we delve into version 0 and 1, a consistent narrative unfolds across licenses. The distribution reveals a shared right-skewed pattern. Irrespective of the license, version 0 and 1 packages predominantly reside within the realm of lower download counts.\nGPL’s Stronghold in Higher Versions: A shift occurs when we ascend to version numbers greater than 2. GPL licenses assert their dominance, with a mode around 40,000 downloads. In contrast, MIT licenses exhibit a mode around 5,000 downloads for higher versions. This disparity suggests that the influence of higher version numbers on popularity is more pronounced within the GPL ecosystem.\n\n\nCode\nmajority_license_df_filter &lt;- majority_license_version_df %&gt;% filter(filter_outliers_iqr(count))\n\nggplot(majority_license_df_filter, aes(x = count)) +\n  geom_histogram(fill = \"cornflowerblue\", color = \"black\",breaks=custom_breaks) +\n  facet_grid(version_group ~ license_group, scales = \"free_y\") +\n  labs(x = \"Count\", y = \"Frequency\") +\n  ggtitle(\"Faceted Histogram by Version and License\") + \n  theme_minimal()"
  },
  {
    "objectID": "results.html#dependency-analysis",
    "href": "results.html#dependency-analysis",
    "title": "3  Results",
    "section": "3.8 Dependency Analysis",
    "text": "3.8 Dependency Analysis\nA consumer facing product like an R package, the consumers’ utility gets to decide how well some package is doing. This is the same trick Google uses to index webpages, and same trick researchers use to gauge the importance of an academic paper.\nNETWORK ANALYSIS\nWe thought it would be more fun to show different ways a package’s dependency on other package could influence their decision to use one.\n\nRequirements Graph: This network graph gives us an idea of a package’s diversity.\nPackage Enhancers: This graph not only suggests some leads to make better R plots, but also shows how diverse a package is.\nPackage Backlinks: This graph uses principles of webpage back-linking theory to estimate a package’s usefulness.\n\nLet’s move on to next page where the sandbox for these graphs have been implemented."
  },
  {
    "objectID": "d3graph.html",
    "href": "d3graph.html",
    "title": "4  Interactive graph",
    "section": "",
    "text": "Interactive Plots\n\n\n&lt;h2&gt;Dependency Graph&lt;/h2&gt;\nType the name of an R package to view it's dependency graph. If your\npackage is not in our 20102 packages, closest one will be picked.\n(yay algos!)\n\n\n&lt;input type=\"text\" id=\"textbox\" placeholder=\"ggplot2\" /&gt;\n&lt;button id=\"submitBtn\"&gt;Draw&lt;/button&gt;\n\n\n\n\n\n\n&lt;h2&gt;Package Enhancers&lt;/h2&gt;\n\n\n\n\n\n\n&lt;h2&gt;Package Usage&lt;/h2&gt;"
  },
  {
    "objectID": "conclusion.html#understanding-package-popularity",
    "href": "conclusion.html#understanding-package-popularity",
    "title": "5  Conclusion",
    "section": "5.1 Understanding Package Popularity",
    "text": "5.1 Understanding Package Popularity\nOur exploration into R package popularity reveals nuanced relationships between package characteristics and acclaim. The distribution of download counts showcases a right-skewed pattern, with a majority of packages garnering modest attention while a select few enjoy substantial popularity. This suggests a potential concentration of attention towards specific packages."
  },
  {
    "objectID": "conclusion.html#license-dynamics-impact-on-popularity",
    "href": "conclusion.html#license-dynamics-impact-on-popularity",
    "title": "5  Conclusion",
    "section": "5.2 License Dynamics: Impact on Popularity",
    "text": "5.2 License Dynamics: Impact on Popularity\nLicense type emerges as a significant factor shaping package popularity within the R ecosystem. GPL and MIT licenses dominate the landscape, collectively constituting almost 90% of packages. While GPL aligns with the collaborative ethos of open-source communities, the permissive nature of MIT licenses attracts developers seeking flexibility. Interestingly, less prevalent licenses like MPL and File exhibit high download counts, hinting that popularity isn’t solely determined by prevalence."
  },
  {
    "objectID": "conclusion.html#license-download-counts-a-complex-relationship",
    "href": "conclusion.html#license-download-counts-a-complex-relationship",
    "title": "5  Conclusion",
    "section": "5.3 License & Download Counts: A Complex Relationship",
    "text": "5.3 License & Download Counts: A Complex Relationship\nAnalysis reveals intriguing insights into the relationship between licenses and download counts. While widely prevalent licenses tend to boast higher maximum downloads, less common licenses often harbor a concentration of moderately popular packages. This challenges the assumption that prevalence directly correlates with popularity."
  },
  {
    "objectID": "conclusion.html#versioning-maintenance-correlation-with-popularity",
    "href": "conclusion.html#versioning-maintenance-correlation-with-popularity",
    "title": "5  Conclusion",
    "section": "5.4 Versioning & Maintenance: Correlation with Popularity",
    "text": "5.4 Versioning & Maintenance: Correlation with Popularity\nVersioning serves as a proxy for maintenance intensity. Surprisingly, higher version numbers correlate with increased download counts, suggesting users’ inclination towards updated packages. However, within the top 100 downloaded packages, version 1 emerges as the most frequent, highlighting the paradoxical nature of version popularity among highly acclaimed packages."
  },
  {
    "objectID": "conclusion.html#intersection-of-license-and-version",
    "href": "conclusion.html#intersection-of-license-and-version",
    "title": "5  Conclusion",
    "section": "5.5 Intersection of License and Version",
    "text": "5.5 Intersection of License and Version\nThe interplay between license types and version numbers reveals distinctive patterns. MIT licenses exhibit a dominance of version 0, possibly capturing experimental releases, while GPL licenses showcase a stronger presence in higher version realms, indicative of ongoing development efforts."
  },
  {
    "objectID": "conclusion.html#unified-influence-on-popularity",
    "href": "conclusion.html#unified-influence-on-popularity",
    "title": "5  Conclusion",
    "section": "5.6 Unified Influence on Popularity",
    "text": "5.6 Unified Influence on Popularity\nWhen examining the combined impact of license and version on popularity, a consistent narrative unfolds for versions 0 and 1 across licenses, residing within lower download counts. However, GPL licenses showcase a stronghold in higher versions, emphasizing their pronounced influence on popularity in this domain."
  },
  {
    "objectID": "conclusion.html#dependency-analysis",
    "href": "conclusion.html#dependency-analysis",
    "title": "5  Conclusion",
    "section": "5.7 Dependency Analysis",
    "text": "5.7 Dependency Analysis\nNetwork analysis offers multifaceted perspectives on package utility and influence. Requirements graphs showcase package diversity, enhancer graphs suggest leads for better plots, and backlink graphs emulate webpage back-linking principles to estimate package usefulness.\nIn conclusion, R package popularity reflects a complex interplay of licensing, versioning, and dependencies. Understanding these dynamics provides valuable insights for developers aiming to enhance their package’s acclaim within the R ecosystem."
  }
]