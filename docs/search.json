[
  {
    "objectID": "results.html",
    "href": "results.html",
    "title": "3  Results",
    "section": "",
    "text": "Dependency Analysis: How do package dependencies (Depends, Imports, LinkingTo) influence the popularity or adoption of R packages?\nLicensing Trends: What are the prevailing trends in package licensing within the R ecosystem?\nMaintainability of Package: How version updates correlate with other package characteristics, such as the number of dependent packages and suggested packages, and the total number of downloads.\n\nFirst of all,\n\n\nCode\nlibrary(ggplot2)\nlibrary(patchwork)\ndf = read.csv(\"./assets/cran_packages_dropped.csv\")\n\nhist = ggplot(df, aes(x = count)) +\n  geom_histogram(fill = \"cornflowerblue\", color = \"black\", alpha = 0.7, bins = 50) +\n  labs(title = \"Histograms for # of download \", x = \"# of download\") +\n  theme_minimal() \n\n\niqr &lt;- IQR(df$count)\n\n# Set a threshold for identifying upper outliers\nthreshold &lt;- 1.5  # You can adjust this value based on your criteria\n\n# Identify upper outliers\nupper_outliers &lt;- df$count &gt; quantile(df$count, 0.75) + threshold * iqr\n\n# Filter rows with upper outliers\nno_outliers_df &lt;- df[!upper_outliers, ]\n\nhist_no_outlier = ggplot(no_outliers_df, aes(x = count)) +\n  geom_histogram(fill = \"cornflowerblue\", color = \"black\", alpha = 0.7, bins = 20) +\n  labs(title = \"Histograms for # of download (no upper outliers)\", x = \"# of download\") +\n  theme_minimal()\n\n\n(hist | hist_no_outlier) + plot_layout(ncol = 2)\n\n\n\n\n\nVery highly skewed to the right\n\n\nCode\n# package_barplot &lt;-ggplot(data=df, aes(x=reorder(License, -table(License)[License]))) +\n#   geom_bar(fill= \"cornflowerblue\", position = position_dodge(width = 2)) +\n#   theme_minimal() +\n#   theme(axis.text.x = element_text(angle = 60, hjust=1)) +\n#   labs(title=\"Frequency of license\", x=\"License\")\n# package_barplot\n\n\nHighliy skewed so if we exclude the license that occur less than 10\n\n\nCode\nlibrary(tidyr)\nlibrary(dplyr)\n\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\n\nCode\n# value_counts &lt;- df %&gt;%\n#   group_by(License) %&gt;%\n#   summarise(count = n())\n# \n# value_counts\n# \n# license_filtered &lt;- df %&gt;%\n#   filter(License %in% value_counts$License[value_counts$count &gt;= 10])\n# \n# package_barplot &lt;-ggplot(data=license_filtered, aes(x=reorder(License, -table(License)[License]))) +\n#   geom_bar(fill= \"cornflowerblue\", position = position_dodge(width = 2)) +\n#   theme_minimal() +\n#   theme(axis.text.x = element_text(angle = 60, hjust=1)) +\n#   labs(title=\"Frequency of license\", x=\"License\")\n# package_barplot\n\n\n\n\nCode\nlicenses = c(\"ACM\", \"AGPL\", \"Apache\", \"Artistic\", \"BSD\", \"BSL\", \"CC\", \"CCO\", \"CeCILL\", \"CPL\", \"Common Public\", \"Creative Common\", \"EPL\", \"EUPL\", \"FreeBSD\", \"GNU\", \"GPL\", \"LGPL\", \"Lucent Public\", \"MIT\", \"MPL\", \"Mozilla Public\", \"Unlimited\", \"file\")\n\ndf = df %&gt;% \n  mutate(\n    license_group = NA\n  )\n\nfor (lic in licenses) {\n  df = df %&gt;%\n    mutate(\n      license_group = case_when(grepl(paste0(\"^\",lic), License) ~ paste(lic),\n                        !is.na(license_group) ~ license_group,\n                        .default = NA)\n    )\n}\n\n\ndf &lt;- df %&gt;%\n  mutate(\n    license_group = ifelse(License == \"CECILL-2.1\", \"CeCILL\", license_group)\n  )\n\nvalue_counts_agg = df %&gt;% \n  group_by(license_group) %&gt;%\n  summarise(total_count = n())\n\n\npackage_barplot &lt;-ggplot(data=value_counts_agg, aes(x=reorder(license_group, -total_count), y=total_count)) +\n  geom_col(fill= \"cornflowerblue\") +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 60, hjust=1)) +\n  labs(title=\"Frequency of license (Overall)\", x=\"License\", y=\"Frequency\")\n\npackage_barplot\n\n\n\n\n\n\n\nCode\ndf_summary &lt;- df %&gt;%\n  group_by(license_group) %&gt;%\n  summarise(\n    mean = mean(count),\n    median = median(count),\n    max = max(count)\n  )\n\n# order_max = df_summary %&gt;% arrange(max) %&gt;% pull(license_group)\n# order_max\ntmp = df_summary\ntmp\n\n\n# A tibble: 23 × 4\n   license_group     mean  median      max\n   &lt;chr&gt;            &lt;dbl&gt;   &lt;dbl&gt;    &lt;int&gt;\n 1 ACM            686780. 686780.   929395\n 2 AGPL            76907.  20068   3024235\n 3 Apache         556795.  22530  49090177\n 4 Artistic       408676.  31595  16782898\n 5 BSD            932194.  35549  48433332\n 6 BSL           4074162.  35714. 35430430\n 7 CC              59651.  17570   3195237\n 8 CPL            217894. 217894.   420555\n 9 CeCILL          54435.  42575    253006\n10 Common Public  973862. 973862.  1848911\n# ℹ 13 more rows\n\n\nCode\ndf_summary = pivot_longer(df_summary, cols = c(mean, median, max), names_to = \"statistic\", values_to = \"value\")\n\ndf_summary = left_join(df_summary, tmp, by = \"license_group\")\n\n# Create a Cleveland dot plot\nplot = ggplot(df_summary, aes(x = reorder(license_group, max), y = value, color = factor(statistic))) +\n  geom_point(shape = 18, size=3) +\n  labs(title = \"Cleveland Dot Plot - Summary statistics by License (log scale)\", x=\"License\", y = \"Summary statstics\", color = \"Summary\") +\n  scale_color_manual(values = c(\"mean\" = \"blue\", \"median\" = \"green\", \"max\" = \"red\")) + \n  theme(axis.text.x = element_text(angle = 60, hjust=1)) +\n  theme_minimal() +\n  coord_flip()\n\nplot_log &lt;- plot + scale_y_log10(labels = scales::comma)\n  \nplot_log\n\n\n\n\n\nCode\n# plot_median = ggplot(df_summary, aes(x = license_group, y = mean_value)) +\n#   geom_point(shape = 17, color = \"green\", size = 3) +\n#   labs(title = \"Cleveland Dot Plot - median by License\", x=\"License\", y = \"median\") +\n#   theme(axis.text.x = element_text(angle = 60, hjust=1)) +\n#   coord_flip()\n# \n#   \n# plot_max = ggplot(df_summary, aes(x = license_group, y = mean_value)) +\n#   geom_point(shape = 16, color = \"red\", size = 3) +\n#   labs(title = \"Cleveland Dot Plot - max by License\", x=\"License\", y = \"max\") +\n#   theme(axis.text.x = element_text(angle = 60, hjust=1)) +\n#   coord_flip()\n# \n# grid.arrange(plot_mean, plot_median, plot_max, ncol = 3)\n\n\nFor most of the licenses, median is at least 10,000 LGPL apach, CC are top 3-5 prevalent licenses but their maxes are not really top.\n\n\nCode\n# library(gridExtra)\ntop_100 &lt;- df %&gt;%\n  arrange(desc(count)) %&gt;%\n  slice(1:100)\n\ntop_100_counts_agg = top_100 %&gt;% \n  group_by(license_group) %&gt;%\n  summarise(total_count = n())\n\ntop_100_counts_agg\n\n\n# A tibble: 8 × 2\n  license_group total_count\n  &lt;chr&gt;               &lt;int&gt;\n1 Apache                  2\n2 BSD                     2\n3 BSL                     1\n4 GPL                    28\n5 LGPL                    1\n6 MIT                    64\n7 MPL                     1\n8 file                    1\n\n\nCode\ntop_100_package_barplot &lt;-ggplot(data=top_100_counts_agg, aes(x=reorder(license_group, -total_count), y=total_count)) +\n  geom_col(fill= \"cornflowerblue\") +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 60, hjust=1)) +\n  labs(title=\"Frequency of license (Top 100)\", x=\"License\", y=\"Frequency\")\n\ntop_100_package_barplot\n\n\n\n\n\nCode\n(package_barplot | top_100_package_barplot) + plot_layout(ncol = 2)\n\n\n\n\n\nBottom 100\n\n\nCode\n# bottom_100 &lt;- df %&gt;%\n#   arrange(count) %&gt;%\n#   slice(1:100)\n# \n# bottom_100_counts_agg = bottom_100 %&gt;% \n#   group_by(license_group) %&gt;%\n#   summarise(total_count = n())\n# \n# bottom_100_counts_agg\n# \n# \n# bottom_100_package_barplot &lt;-ggplot(data=bottom_100_counts_agg, aes(x=reorder(license_group, -total_count), y=total_count)) +\n#   geom_col(fill= \"cornflowerblue\") +\n#   theme_minimal() +\n#   theme(axis.text.x = element_text(angle = 60, hjust=1)) +\n#   labs(title=\"Frequency of license (Bottom 100)\", x=\"License\", y=\"Frequency\")\n# \n# bottom_100_package_barplot\n\n\n\n\nCode\nlibrary(stringr)\n# Boxplot + density based on the version (popularity)\ndf$version_group &lt;- as.numeric(str_extract(df$Version, \"\\\\d+\"))\ndf = df %&gt;%\n  mutate(version_group = if_else(version_group &gt;= 5, 5, version_group))\ndf$version_group = as.factor(df$version_group)\ndf = df %&gt;%\n  mutate(version_group = if_else(version_group == \"5\", \"5 ≥\", version_group))\n\n# Function to filter outliers using IQR\nfilter_outliers_iqr &lt;- function(x, coef = 1.5) {\n  q1 &lt;- quantile(x, 0.25)\n  q3 &lt;- quantile(x, 0.75)\n  iqr &lt;- q3 - q1\n  lower_bound &lt;- q1 - coef * iqr\n  upper_bound &lt;- q3 + coef * iqr\n  return(between(x, 0, upper_bound))\n}\n\n# Filter outliers using the filter_outliers_iqr function\nfiltered_df &lt;- df %&gt;% filter(filter_outliers_iqr(count))\n\nggplot(filtered_df, aes(x = count, fill=version_group)) +\n  geom_histogram(fill = \"cornflowerblue\", color = \"black\", alpha = 0.7) +\n  labs(title = \"\", x = \"Version\", y = \"# of download\") +\n  facet_wrap(~version_group, scales = \"free_y\") +\n  theme_minimal()\n\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\nCode\nfilter_outliers &lt;- function(x, coef = 1.5) {\n  q1 &lt;- quantile(x, 0.25)\n  q3 &lt;- quantile(x, 0.75)\n  iqr &lt;- q3 - q1\n  upper_bound &lt;- q3 + coef * iqr\n  return(between(x, upper_bound, 200000000))\n}\n\n# Filter outliers using the filter_outliers_iqr function\nfiltered_df_large =  df %&gt;% filter(filter_outliers(count))\n\noutliers = ggplot(filtered_df_large, aes(x = count, fill=version_group)) +\n  geom_histogram(fill = \"cornflowerblue\", color = \"black\", alpha = 0.7) +\n  labs(title = \"\", x = \"Version\", y = \"# of download\") +\n  facet_wrap(~version_group, scales = \"free_y\") +\n  theme_minimal()\n\n\n\n\nCode\nlibrary(vcd)\n\n\nLoading required package: grid\n\n\nCode\nmajority_license_df &lt;- df %&gt;% filter(license_group %in% c(\"GPL\", \"MIT\"))\nmajority_license_df = majority_license_df %&gt;%\n    mutate(\n    version_group = ifelse(version_group == \"0\" | version_group == \"1\", version_group, \"2 ≥\")\n    )\n# maybe remove needscompilation and add one more license_group\nmosaic(license_group ~  version_group + NeedsCompilation, \n       direction = c(\"v\", \"v\", \"h\"), \n       majority_license_df, \n       # highlighting_fill = brewer.pal(1, \"Reds\"),\n       spacing = spacing_dimequal(c(.4, .3, 0, 0)),\n       rot_labels = 0,\n       labeling_args = list(set_varnames = c(NeedsCompilation = \"Need Compilation?\", version_group = \"Version\", license_group = \"License\")))\n\n\n\n\n\n\n\nCode\nlibrary(stringr)\ndf$imports_num = str_count(df$Imports, \",\") + 1\ndf$suggest_num = str_count(df$Suggests, \",\") + 1\ndf$linking_num = str_count(df$LinkingTo, \",\") + 1\ndf$depend_num = str_count(df$Depends, \",\") + 1\n\ndf$imports_num[is.na(df$imports_num)] = 0\ndf$suggest_num[is.na(df$suggest_num)] = 0\ndf$linking_num[is.na(df$linking_num)] = 0\ndf$depend_num[is.na(df$ldepend_num)] = 0\n\n# summary(df$imports_num)\n# summary(df$suggest_num)\n# \n# ggplot(df, aes(x = imports_num, y = count)) +\n#   geom_point(alpha=0.2) +\n#   labs(title = \"Scatterplot: # of imports vs # of download\", x = \"# of imports\", y = \"# of download\") +\n#   theme_minimal()\n# \n# ggplot(df, aes(x = suggest_num, y = count)) +\n#   geom_point(alpha=0.2) +\n#   labs(title = \"Scatterplot: # of suggest vs # of download\", x = \"# of suggest\", y = \"# of download\") +\n#   theme_minimal()\n# \n# ggplot(df, aes(x = linking_num, y = count)) +\n#   geom_point(alpha=0.2) +\n#   labs(title = \"Scatterplot: # of linking vs # of download\", x = \"# of linking\", y = \"# of download\") +\n#   theme_minimal()\n\n\nMIT is less maintained.\n\n4 Suggest and import might be correlated\n\n\nCode\nlibrary(GGally)\n\n\nRegistered S3 method overwritten by 'GGally':\n  method from   \n  +.gg   ggplot2\n\n\nCode\ntop_1000 &lt;- df %&gt;%\n  arrange(desc(count)) %&gt;%\n  slice(1:1000)\n\nnum_columns &lt;- c(\"linking_num\",\"depend_num\", \"imports_num\", \"suggest_num\", \"count\", \"version_group\")\ntop_1000_num &lt;- subset(top_1000, select = num_columns)\nggparcoord(top_1000_num, alphaLines = .7, scale=\"uniminmax\", columns=1:5, splineFactor = 10, groupColumn=\"version_group\") +\n  scale_color_brewer(palette=\"Dark2\")\n\n\n\n\n\nCode\n  # scale_color_viridis_d()\n  \n  # scale_color_brewer(palette=\"Dark2\")\n\n\n# bottom_1000 &lt;- df %&gt;%\n#   arrange(count) %&gt;%\n#   slice(1:1000)\n# \n# bottom_1000_num &lt;- subset(bottom_1000, select = num_columns)\n# ggparcoord(bottom_1000_num, alphaLines = .2, scale=\"uniminmax\", columns=1:4, splineFactor = 10)\n# \n# bottom_100 &lt;- df %&gt;%\n#   arrange(count) %&gt;%\n#   slice(1:100)\n# \n# bottom_100_num &lt;- subset(bottom_100, select = num_columns)\n# ggparcoord(bottom_100_num, alphaLines = .2, scale=\"uniminmax\", columns=1:4, splineFactor = 10)\n\n\nNo from high imports_num to high suggest_num, from high suggest_num to high linking_num, high count does not come from more linking_num High correlation between suggest_num and imports_num\nFor interpretation, look at moving ratings in dependency_relationships Could use heatmap\n\n\nCode\nnum_columns &lt;- c(\"linking_num\",\"depend_num\", \"imports_num\", \"suggest_num\")\ndf_num &lt;- subset(df, select = num_columns)\nggpairs(df_num)\n\n\nWarning in ggally_statistic(data = data, mapping = mapping, na.rm = na.rm, :\nRemoved 5291 rows containing missing values\n\n\nWarning: Removed 5291 rows containing missing values (`geom_point()`).\n\n\nWarning: Removed 5291 rows containing non-finite values (`stat_density()`).\n\n\nWarning in ggally_statistic(data = data, mapping = mapping, na.rm = na.rm, :\nRemoved 5291 rows containing missing values\n\nWarning in ggally_statistic(data = data, mapping = mapping, na.rm = na.rm, :\nRemoved 5291 rows containing missing values\n\n\nWarning: Removed 5291 rows containing missing values (`geom_point()`).\nRemoved 5291 rows containing missing values (`geom_point()`).\n\n\n\n\n\nCode\ntop_100 &lt;- df %&gt;%\n  arrange(desc(count)) %&gt;%\n  slice(1:100)\n\ntop_100_num &lt;- subset(top_100, select = num_columns)\nggpairs(top_100_num)\n\n\nWarning in ggally_statistic(data = data, mapping = mapping, na.rm = na.rm, :\nRemoved 25 rows containing missing values\n\n\nWarning: Removed 25 rows containing missing values (`geom_point()`).\n\n\nWarning: Removed 25 rows containing non-finite values (`stat_density()`).\n\n\nWarning in ggally_statistic(data = data, mapping = mapping, na.rm = na.rm, :\nRemoved 25 rows containing missing values\n\nWarning in ggally_statistic(data = data, mapping = mapping, na.rm = na.rm, :\nRemoved 25 rows containing missing values\n\n\nWarning: Removed 25 rows containing missing values (`geom_point()`).\nRemoved 25 rows containing missing values (`geom_point()`).\n\n\n\n\n\nCode\nnum_columns &lt;- c(\"linking_num\",\"depend_num\", \"imports_num\", \"suggest_num\", \"count\")\ndf_num &lt;- subset(df, select = num_columns)\nggpairs(df_num)\n\n\nWarning in ggally_statistic(data = data, mapping = mapping, na.rm = na.rm, :\nRemoved 5291 rows containing missing values\n\n\nWarning: Removed 5291 rows containing missing values (`geom_point()`).\n\n\nWarning: Removed 5291 rows containing non-finite values (`stat_density()`).\n\n\nWarning in ggally_statistic(data = data, mapping = mapping, na.rm = na.rm, :\nRemoved 5291 rows containing missing values\n\nWarning in ggally_statistic(data = data, mapping = mapping, na.rm = na.rm, :\nRemoved 5291 rows containing missing values\n\nWarning in ggally_statistic(data = data, mapping = mapping, na.rm = na.rm, :\nRemoved 5291 rows containing missing values\n\n\nWarning: Removed 5291 rows containing missing values (`geom_point()`).\nRemoved 5291 rows containing missing values (`geom_point()`).\nRemoved 5291 rows containing missing values (`geom_point()`).\n\n\n\n\n\nCode\ntop_100_num &lt;- subset(top_100, select = num_columns)\nggpairs(top_100_num)\n\n\nWarning in ggally_statistic(data = data, mapping = mapping, na.rm = na.rm, :\nRemoved 25 rows containing missing values\n\n\nWarning: Removed 25 rows containing missing values (`geom_point()`).\n\n\nWarning: Removed 25 rows containing non-finite values (`stat_density()`).\n\n\nWarning in ggally_statistic(data = data, mapping = mapping, na.rm = na.rm, :\nRemoved 25 rows containing missing values\n\nWarning in ggally_statistic(data = data, mapping = mapping, na.rm = na.rm, :\nRemoved 25 rows containing missing values\n\nWarning in ggally_statistic(data = data, mapping = mapping, na.rm = na.rm, :\nRemoved 25 rows containing missing values\n\n\nWarning: Removed 25 rows containing missing values (`geom_point()`).\nRemoved 25 rows containing missing values (`geom_point()`).\nRemoved 25 rows containing missing values (`geom_point()`).\n\n\n\n\n\nInteractive scatterplot: x (one of imoprts_num, linking_…), y (count), color (version or license)\nModerate size histogram"
  }
]